--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.11 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		DialogueData = table.freeze({
			SetCallback = noop
		}),
		InitiateDialogue = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("ZAP_RELIABLE")
local unreliable = remotes:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(2)
local event_queue: { [number]: { any } } = table.create(2)
event_queue[1] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.dialogueId = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.data = {}
			value.data.Interactions = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key_1
				local val_1
				key_1 = buffer.readu16(incoming_buff, read(2))
				val_1 = {}
				local len_2 = buffer.readu16(incoming_buff, read(2))
				val_1.Content = buffer.readstring(incoming_buff, read(len_2), len_2)
				local len_3 = buffer.readu16(incoming_buff, read(2))
				val_1.Title = buffer.readstring(incoming_buff, read(len_3), len_3)
				val_1.Speed = buffer.readf32(incoming_buff, read(4))
				val_1.Responses = {}
				local len_4 = buffer.readu16(incoming_buff, read(2))
				for i_1 = 1, len_4 do
					local val_2
					val_2 = {}
					val_2.Next = buffer.readu8(incoming_buff, read(1))
					local len_5 = buffer.readu16(incoming_buff, read(2))
					val_2.Content = buffer.readstring(incoming_buff, read(len_5), len_5)
					val_2.Speed = buffer.readu8(incoming_buff, read(1))
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_2.TextColor = Color3.fromRGB(buffer.readu8(incoming_buff, read(1)), buffer.readu8(incoming_buff, read(1)), buffer.readu8(incoming_buff, read(1)))
					else
						val_2.TextColor = nil
					end
					val_1.Responses[i_1] = val_2
				end
				value.data.Interactions[key_1] = val_1
			end
			value.data.ServerActions = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key_2
				key_2 = buffer.readu16(incoming_buff, read(2))
				value.data.ServerActions[key_2] = true
			end
			value.data.ClientActions = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key_3
				local val_3
				key_3 = buffer.readu16(incoming_buff, read(2))
				val_3 = {}
				local len_6 = buffer.readu16(incoming_buff, read(2))
				for i_2 = 1, len_6 do
					local val_4
					val_4 = {}
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_4.before = {}
						local len_7 = buffer.readu16(incoming_buff, read(2))
						for i_3 = 1, len_7 do
							local val_5
							val_5 = {}
							val_5.type = buffer.readu8(incoming_buff, read(1))
							val_5.data = {}
							local enum_value_1 = buffer.readu8(incoming_buff, read(1))
							if enum_value_1 == 0 then
								val_5.data.ActionData = "MoveCamera"
								local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
								local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
								local angle_1 = axisangle_1.Magnitude
								if angle_1 ~= 0 then
									val_5.data.target = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
								else
									val_5.data.target = CFrame.new(pos_1)
								end
								val_5.data.speed = buffer.readf32(incoming_buff, read(4))
							else
								error("Invalid variant")
							end
							val_4.before[i_3] = val_5
						end
					else
						val_4.before = nil
					end
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						val_4.after = {}
						local len_8 = buffer.readu16(incoming_buff, read(2))
						for i_4 = 1, len_8 do
							local val_6
							val_6 = {}
							val_6.type = buffer.readu8(incoming_buff, read(1))
							val_6.data = {}
							local enum_value_2 = buffer.readu8(incoming_buff, read(1))
							if enum_value_2 == 0 then
								val_6.data.ActionData = "MoveCamera"
								local pos_2 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
								local axisangle_2 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
								local angle_2 = axisangle_2.Magnitude
								if angle_2 ~= 0 then
									val_6.data.target = CFrame.fromAxisAngle(axisangle_2, angle_2) + pos_2
								else
									val_6.data.target = CFrame.new(pos_2)
								end
								val_6.data.speed = buffer.readf32(incoming_buff, read(4))
							else
								error("Invalid variant")
							end
							val_4.after[i_4] = val_6
						end
					else
						val_4.after = nil
					end
					val_3[i_2] = val_4
				end
				value.data.ClientActions[key_3] = val_3
			end
			if events[1] then
				task.spawn(events[1], value)
			else
				table.insert(event_queue[1], value)
				if #event_queue[1] > 64 then
					warn(`[ZAP] {#event_queue[1]} events in queue for DialogueData. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	InitiateDialogue = {
		Fire = function(Value: ({
			id: (string),
			nd: (boolean),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value.id
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.id, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.nd and 1 or 0)
		end,
	},
	DialogueData = {
		SetCallback = function(Callback: (({
			success: (boolean),
			dialogueId: (string),
			data: ({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
				ServerActions: ({ [(number)]: true }),
				ClientActions: ({ [(number)]: ({ ({
					before: (({ ({
						type: (number),
						data: ({
							ActionData: "MoveCamera",
							target: (CFrame),
							speed: (number),
						}),
					}) })?),
					after: (({ ({
						type: (number),
						data: ({
							ActionData: "MoveCamera",
							target: (CFrame),
							speed: (number),
						}),
					}) })?),
				}) }) }),
			}),
		})) -> ()): () -> ()
			events[1] = Callback
			for _, value in event_queue[1] do
				task.spawn(Callback, value)
			end
			event_queue[1] = {}
			return function()
				events[1] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
