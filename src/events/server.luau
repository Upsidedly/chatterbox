--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.11 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		TerminateDialogue = table.freeze({
			SetCallback = noop
		}),
		GetClientDialoguesData = table.freeze({
			SetCallback = noop
		}),
		ReturnClientDialoguesData = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ReturnClientDialoguesDataFinished = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		DialogueData = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		InitiateDialogue = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local unreliable = remotes:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(6)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			if events[1] then
				task.spawn(events[1], player, value)
			end
		elseif id == 2 then
			local value
			if events[2] then
				task.spawn(events[2], player, value)
			end
		elseif id == 6 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.id = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.nd = buffer.readu8(incoming_buff, read(1)) == 1
			if events[6] then
				task.spawn(events[6], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	ReturnClientDialoguesData = {
		Fire = function(Player: Player, Value: ({ [(string)]: ({
			ServerActions: ({ [(number)]: true }),
			ClientActions: ({ [(number)]: ({ ({
				before: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
				after: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
			}) }) }),
		}) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in Value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_pos_2 = alloc(2)
				local len_3 = 0
				for k_2, __1 in v_1.ServerActions do
					len_3 = len_3 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_2)
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_3)
				local len_pos_3 = alloc(2)
				local len_4 = 0
				for k_3, v_2 in v_1.ClientActions do
					len_4 = len_4 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_3)
					local len_5 = #v_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_2[i_1]
						if val_1.before == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_6 = #val_1.before
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
							for i_2 = 1, len_6 do
								local val_2 = val_1.before[i_2]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_2.type)
								if val_2.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_1, angle_1 = val_2.data.target:ToAxisAngle()
									axis_1 = axis_1 * angle_1
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
						if val_1.after == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_7 = #val_1.after
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
							for i_3 = 1, len_7 do
								local val_3 = val_1.after[i_3]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3.type)
								if val_3.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_2, angle_2 = val_3.data.target:ToAxisAngle()
									axis_2 = axis_2 * angle_2
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_4)
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({ [(string)]: ({
			ServerActions: ({ [(number)]: true }),
			ClientActions: ({ [(number)]: ({ ({
				before: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
				after: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
			}) }) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in Value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_pos_2 = alloc(2)
				local len_3 = 0
				for k_2, __1 in v_1.ServerActions do
					len_3 = len_3 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_2)
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_3)
				local len_pos_3 = alloc(2)
				local len_4 = 0
				for k_3, v_2 in v_1.ClientActions do
					len_4 = len_4 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_3)
					local len_5 = #v_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_2[i_1]
						if val_1.before == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_6 = #val_1.before
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
							for i_2 = 1, len_6 do
								local val_2 = val_1.before[i_2]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_2.type)
								if val_2.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_1, angle_1 = val_2.data.target:ToAxisAngle()
									axis_1 = axis_1 * angle_1
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
						if val_1.after == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_7 = #val_1.after
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
							for i_3 = 1, len_7 do
								local val_3 = val_1.after[i_3]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3.type)
								if val_3.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_2, angle_2 = val_3.data.target:ToAxisAngle()
									axis_2 = axis_2 * angle_2
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_4)
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({ [(string)]: ({
			ServerActions: ({ [(number)]: true }),
			ClientActions: ({ [(number)]: ({ ({
				before: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
				after: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
			}) }) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in Value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_pos_2 = alloc(2)
				local len_3 = 0
				for k_2, __1 in v_1.ServerActions do
					len_3 = len_3 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_2)
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_3)
				local len_pos_3 = alloc(2)
				local len_4 = 0
				for k_3, v_2 in v_1.ClientActions do
					len_4 = len_4 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_3)
					local len_5 = #v_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_2[i_1]
						if val_1.before == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_6 = #val_1.before
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
							for i_2 = 1, len_6 do
								local val_2 = val_1.before[i_2]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_2.type)
								if val_2.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_1, angle_1 = val_2.data.target:ToAxisAngle()
									axis_1 = axis_1 * angle_1
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
						if val_1.after == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_7 = #val_1.after
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
							for i_3 = 1, len_7 do
								local val_3 = val_1.after[i_3]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3.type)
								if val_3.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_2, angle_2 = val_3.data.target:ToAxisAngle()
									axis_2 = axis_2 * angle_2
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_4)
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({ [(string)]: ({
			ServerActions: ({ [(number)]: true }),
			ClientActions: ({ [(number)]: ({ ({
				before: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
				after: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
			}) }) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in Value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_pos_2 = alloc(2)
				local len_3 = 0
				for k_2, __1 in v_1.ServerActions do
					len_3 = len_3 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_2)
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_3)
				local len_pos_3 = alloc(2)
				local len_4 = 0
				for k_3, v_2 in v_1.ClientActions do
					len_4 = len_4 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_3)
					local len_5 = #v_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_2[i_1]
						if val_1.before == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_6 = #val_1.before
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
							for i_2 = 1, len_6 do
								local val_2 = val_1.before[i_2]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_2.type)
								if val_2.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_1, angle_1 = val_2.data.target:ToAxisAngle()
									axis_1 = axis_1 * angle_1
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
						if val_1.after == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_7 = #val_1.after
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
							for i_3 = 1, len_7 do
								local val_3 = val_1.after[i_3]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3.type)
								if val_3.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_2, angle_2 = val_3.data.target:ToAxisAngle()
									axis_2 = axis_2 * angle_2
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_4)
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({ [(string)]: ({
			ServerActions: ({ [(number)]: true }),
			ClientActions: ({ [(number)]: ({ ({
				before: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
				after: (({ ({
					type: (number),
					data: ({
						ActionData: "MoveCamera",
						target: (CFrame),
						speed: (number),
					}),
				}) })?),
			}) }) }),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in Value do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_pos_2 = alloc(2)
				local len_3 = 0
				for k_2, __1 in v_1.ServerActions do
					len_3 = len_3 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_2)
				end
				buffer.writeu16(outgoing_buff, len_pos_2, len_3)
				local len_pos_3 = alloc(2)
				local len_4 = 0
				for k_3, v_2 in v_1.ClientActions do
					len_4 = len_4 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_3)
					local len_5 = #v_2
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_2[i_1]
						if val_1.before == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_6 = #val_1.before
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
							for i_2 = 1, len_6 do
								local val_2 = val_1.before[i_2]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_2.type)
								if val_2.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_1, angle_1 = val_2.data.target:ToAxisAngle()
									axis_1 = axis_1 * angle_1
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_2.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
						if val_1.after == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							local len_7 = #val_1.after
							alloc(2)
							buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
							for i_3 = 1, len_7 do
								local val_3 = val_1.after[i_3]
								alloc(1)
								buffer.writeu8(outgoing_buff, outgoing_apos, val_3.type)
								if val_3.data.ActionData == "MoveCamera" then
									alloc(1)
									buffer.writeu8(outgoing_buff, outgoing_apos, 0)
									local axis_2, angle_2 = val_3.data.target:ToAxisAngle()
									axis_2 = axis_2 * angle_2
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.target.Position.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
									alloc(4)
									buffer.writef32(outgoing_buff, outgoing_apos, val_3.data.speed)
								else
									error("Invalid variant")
								end
							end
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_3, len_4)
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ReturnClientDialoguesDataFinished = {
		Fire = function(Player: Player)
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			player_map[Player] = save()
		end,
		FireAll = function()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player)
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	DialogueData = {
		Fire = function(Player: Player, Value: ({
			success: (boolean),
			dialogueId: (string),
			data: (({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
			})?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.success and 1 or 0)
			local len_1 = #Value.dialogueId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.dialogueId, len_1)
			if Value.data == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_2 = 0
				for k_1, v_1 in Value.data.Interactions do
					len_2 = len_2 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_1)
					local len_3 = #v_1.Content
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Content, len_3)
					local len_4 = #v_1.Title
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Title, len_4)
					alloc(4)
					buffer.writef32(outgoing_buff, outgoing_apos, v_1.Speed)
					local len_5 = #v_1.Responses
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_1.Responses[i_1]
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Next)
						local len_6 = #val_1.Content
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
						alloc(len_6)
						buffer.writestring(outgoing_buff, outgoing_apos, val_1.Content, len_6)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Speed)
						if val_1.TextColor == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.R * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.G * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.B * 255)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_2)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			success: (boolean),
			dialogueId: (string),
			data: (({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
			})?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.success and 1 or 0)
			local len_1 = #Value.dialogueId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.dialogueId, len_1)
			if Value.data == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_2 = 0
				for k_1, v_1 in Value.data.Interactions do
					len_2 = len_2 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_1)
					local len_3 = #v_1.Content
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Content, len_3)
					local len_4 = #v_1.Title
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Title, len_4)
					alloc(4)
					buffer.writef32(outgoing_buff, outgoing_apos, v_1.Speed)
					local len_5 = #v_1.Responses
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_1.Responses[i_1]
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Next)
						local len_6 = #val_1.Content
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
						alloc(len_6)
						buffer.writestring(outgoing_buff, outgoing_apos, val_1.Content, len_6)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Speed)
						if val_1.TextColor == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.R * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.G * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.B * 255)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			success: (boolean),
			dialogueId: (string),
			data: (({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
			})?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.success and 1 or 0)
			local len_1 = #Value.dialogueId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.dialogueId, len_1)
			if Value.data == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_2 = 0
				for k_1, v_1 in Value.data.Interactions do
					len_2 = len_2 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_1)
					local len_3 = #v_1.Content
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Content, len_3)
					local len_4 = #v_1.Title
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Title, len_4)
					alloc(4)
					buffer.writef32(outgoing_buff, outgoing_apos, v_1.Speed)
					local len_5 = #v_1.Responses
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_1.Responses[i_1]
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Next)
						local len_6 = #val_1.Content
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
						alloc(len_6)
						buffer.writestring(outgoing_buff, outgoing_apos, val_1.Content, len_6)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Speed)
						if val_1.TextColor == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.R * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.G * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.B * 255)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			success: (boolean),
			dialogueId: (string),
			data: (({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
			})?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.success and 1 or 0)
			local len_1 = #Value.dialogueId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.dialogueId, len_1)
			if Value.data == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_2 = 0
				for k_1, v_1 in Value.data.Interactions do
					len_2 = len_2 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_1)
					local len_3 = #v_1.Content
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Content, len_3)
					local len_4 = #v_1.Title
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Title, len_4)
					alloc(4)
					buffer.writef32(outgoing_buff, outgoing_apos, v_1.Speed)
					local len_5 = #v_1.Responses
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_1.Responses[i_1]
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Next)
						local len_6 = #val_1.Content
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
						alloc(len_6)
						buffer.writestring(outgoing_buff, outgoing_apos, val_1.Content, len_6)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Speed)
						if val_1.TextColor == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.R * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.G * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.B * 255)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			success: (boolean),
			dialogueId: (string),
			data: (({
				Interactions: ({ [(number)]: ({
					Content: (string),
					Title: (string),
					Speed: (number),
					Responses: ({ ({
						Next: (number),
						Content: (string),
						Speed: (number),
						TextColor: ((Color3)?),
					}) }),
				}) }),
			})?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.success and 1 or 0)
			local len_1 = #Value.dialogueId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.dialogueId, len_1)
			if Value.data == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_pos_1 = alloc(2)
				local len_2 = 0
				for k_1, v_1 in Value.data.Interactions do
					len_2 = len_2 + 1
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, k_1)
					local len_3 = #v_1.Content
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
					alloc(len_3)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Content, len_3)
					local len_4 = #v_1.Title
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
					alloc(len_4)
					buffer.writestring(outgoing_buff, outgoing_apos, v_1.Title, len_4)
					alloc(4)
					buffer.writef32(outgoing_buff, outgoing_apos, v_1.Speed)
					local len_5 = #v_1.Responses
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
					for i_1 = 1, len_5 do
						local val_1 = v_1.Responses[i_1]
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Next)
						local len_6 = #val_1.Content
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
						alloc(len_6)
						buffer.writestring(outgoing_buff, outgoing_apos, val_1.Content, len_6)
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, val_1.Speed)
						if val_1.TextColor == nil then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						else
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.R * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.G * 255)
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.TextColor.B * 255)
						end
					end
				end
				buffer.writeu16(outgoing_buff, len_pos_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	TerminateDialogue = {
		SetCallback = function(Callback: (Player) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	},
	GetClientDialoguesData = {
		SetCallback = function(Callback: (Player) -> ()): () -> ()
			events[2] = Callback
			return function()
				events[2] = nil
			end
		end,
	},
	InitiateDialogue = {
		SetCallback = function(Callback: (Player, ({
			id: (string),
			nd: (boolean),
		})) -> ()): () -> ()
			events[6] = Callback
			return function()
				events[6] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
